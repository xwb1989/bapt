#!/bin/bash

#(B)randeis (A)nti-(P)lagiarism (S)uite
#Author: Wenbin
#Date: 2014/10/06


#usage:
# 1) Given URLs in source_config, download files from Latte, unpack then upload to MOSS
#baps -f source_config -l java
# 2) By specifying directory, upload files in that directory to MOSS
#baps -d source_directory -l java

# -l is for specifying lanaguage, now it only supports Java.


#========================================== Utils =========================
function INFO {
    printf "$(tput setaf 2)INFO $1$(tput sgr 0)"
}

function WARN {
    printf "$(tput setaf 3)WARN $1$(tput sgr 0)"
}

function ERRO {
    printf "$(tput setaf 1)ERRO $1$(tput sgr 0)" 
    exit
}

function validate_directory {
    if [ -d $1 ]; then
        return 0
    else
        ERRO "Invalid directory: $1\n"
        return 1
    fi
}

function validate_source_config {
    if [ -f $1 ]; then
        return true
    else
        ERRO "Invalid file: $1\n"
        return false
    fi
}

#recursion in bash is unsafe
#usage: extract_files source lang
function extract_files {
    for dir in $1/*; do
        INFO "extracting $2 files in $dir\n"
        for file in `find $dir -name *.$2`; do
            if [[ ! $file =~ .*MACOSX.* && $dir != ${file%/*} ]]; then
                mv -f $file $dir
                if [[ $? -ne 0 ]]; then
                    ERRO "fail to move file $file to $dir\n"
                fi
            fi
        done
        INFO "cleaning directories in $dir\n"
        for del in $dir/*; do
            if [[ -d $del ]]; then
                rm -rf $del
            fi
        done
    done
}

#usage: unpack_all dir
#dir should be without spaces
function unpack_all {
    for file in $1/*; do
        #remove spaces in file name
        f="${file// /_}"
        if [[ $f != $file ]]; then
            mv -f "$file" "$f"
        fi
        #unpack archives
        if [[ "$f" =~ .*.(zip)|(tar.gz)|(tgz) ]]; then
            dir="${f%%.*}" #pattern matching: trim the longest match from the end
            INFO "makeing directory $dir\n"
            mkdir "$dir"
            if [ $? -ne 0 ]; then
                ERRO "failed to make directory $dir\n"
            fi
            INFO "extracting files in "$f""
            #unpack
            tar xf "$f" -C "$dir"
            if [[ $? -eq 0 ]]; then
                INFO "extraction succeeded, now removing the archive.\n"
                rm -f "$f"
                #recursively unpack
                unpack_all "$dir"
            fi
        elif [[ -d "$f" ]]; then 
            unpack_all "$f"
        fi
    done
}

function usage_info {
    printf "USAGE:\n"
    printf "\tBy specifying directory, BAPS will unpack archives in the directory properly\n"
    printf "\t\tbaps -d source_directory -l java [-b base_files]\n\n"
    printf "\t-l is for specifying the language, currently only Java is supported.\n"
    printf "\t-b is optional, if it's set, files in the directory base_files will be uploaded as base files.\n"
}
#========================================== Argument validation ===========


#Welcome message 
expected_argc=6
if [[ $# -ne $expected_argc && $# -ne $((expected_argc-2)) ]]; then
    printf "Welcome to (B)randeis (A)nti-(P)lagiarism (S)uite.\n"
    printf "This tool is using MOSS from Stanford as plagiarism detection engine\n"
    printf "and adapted by Wenbin Xiao to automatically preprocess students assigments,\n"
    printf "set up configurations and submit required files to MOSS.\n" 
    printf "\n"
    usage_info
    exit
fi

INFO "============================   Argument Validation   ==============================\n"
#Validate -f, -d and -l
if [[ ($1 != "-f" && $1 != "-d") || $3 != "-l" || ($# -eq $expected_argc && $5 != "-b") ]]; then
    ERRO "unable to identify flags $1 or $3 or $5\n"
fi

#Validate language Java
if [[ $4 != "java" ]]; then
    ERRO "invalid language: $4\n"
fi

#Validate base files directory
base_files=""
if [[ $# -eq $expected_argc ]] && validate_directory $6; then
    base_files=$6
fi

source_from_config=false
source_dir=""
if [[ $1 == "-f" ]]; then
    INFO "checking source_config file: $2\n"
    ERRO "flag -f is currently unavalable\n"
    if validate_source_config $2; then
        INFO "$2 exists.\n"
        source_config=true
    fi
elif [[ $1 == "-d" ]]; then
    INFO "checking source_directory: $2\n"
    if validate_directory $2; then
        INFO "$2 exists.\n"
        source_dir=$2
    fi
fi

INFO "==========================   Argument Validation Done   ===============================\n"

INFO "==========================   MOSS Files Preparation   =================================\n"
INFO "--------------------------   Unpacking and Extracting Files ---------------------------\n"
if [[ $source_dir != "" ]]; then
    INFO "unpacking archives in $source_dir to corresponding directories.\n"
    unpack_all $source_dir  #unpack all archives and remove spaces in their names

    INFO "recursively extracting all $4 files in $source_dir to their corresponding directories.\n"
    extract_files $source_dir java
fi

INFO "--------------------------   Unpacking and Extracting done ----------------------------\n"
INFO "\n"
INFO "--------------------------   Configuring Base Files -----------------------------------\n"

if [[ $5 == "-b" ]]; then
    base_files_dir=$6
    base_files=""
    for file in $base_files_dir/*; do 
        base_files="-b $file $base_files"
    done
    INFO "base_files: $base_files\n"
fi

INFO "--------------------------   Configuring Base Files done ------------------------------\n"

INFO "==========================   MOSS Files Preparation done   ============================\n"
INFO "==========================   Submitting files to MOSS   ===============================\n"
INFO "./moss -l $4 $base_files -x -d $2/*/*.$4\n"
./moss -l $4 $base_files -d $2/*/*.$4

INFO "==========================   Done =====================================================\n"
