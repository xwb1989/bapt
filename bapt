#!/usr/bin/python
#File: bapt
#Author: Wenbin Xiao
#Date: 2014/10/07

#========================================  imports  ====================================
import sys
import zipfile
import tarfile
import os
import argparse
import shutil
import subprocess
from cStringIO import StringIO


#========================================  Config ======================================
SUPPORT_LANG = ["java", "c", "py"]
#========================================  utils  ======================================
class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'

    def disable(self):
        self.HEADER = ''
        self.OKBLUE = ''
        self.OKGREEN = ''
        self.WARNING = ''
        self.FAIL = ''
        self.ENDC = ''

def INFO(string):
    print(bcolors.HEADER + str(string) + bcolors.ENDC)

def OK(string):
    print(bcolors.OKGREEN + str(string) + bcolors.ENDC)

def WARN(string):
    print(bcolors.WARNING + str(string) + bcolors.ENDC)

def ERRO(string):
    print(bcolors.FAIL + str(string) + bcolors.ENDC)
    sys.exit(1)

def welcome():
    print("Welcome to (B)randeis (A)nti-(P)lagiarism (T)ool.")
    print("This tool is using MOSS from Stanford University as plagiarism detection engine")
    print("and provides automatical files pre-process and configurations such that submitting")
    print("the programming assignments of whole class(or with previous classes) can be done")
    print("without much manual effort.\n")
    print("If you have any question about this tool, please email the author:")
    print("\t\tWenbin Xiao(wenbinx@brandeis.edu)")

#identify archive by extension
def is_archive(f):
    return f.endswith(("tar", "zip", "tgz", "tar.gz"))

#identify zip by extension
def is_zip(f):
    return f.endswith("zip")

#identify zip by extension
def is_tar(f):
    return f.endswith(("tgz", "tar", "tar.gz"))

def match(s1, l1):
    for s2 in l1:
        if s2 in s1:
            return True
    return False
    
#extract files in in-memory archive data
def extract_data(f_name, f_data, dest, file_type, ignore_list):
    try:
        if is_zip(f_name):
            #create ZipFile by passing a file-like object
            extract_zip(zipfile.ZipFile(f_data), dest, file_type, ignore_list)
        elif is_tar(f_name):
            #create TarFile by passing fileobj
            extract_tar(tarfile.open(fileobj=f_data), dest, file_type, ignore_list)
        else:
            WARN("unable to identify %s" %(f_name))
    except:
        WARN("unable to extract the file %s" %(f_name))

#recursively extract files in tar file
def extract_tar(tar_file, dest, file_type, ignore_list):
    for f_name in tar_file.getnames():
        if match(f_name, ignore_list):
            continue
        elif f_name.endswith(tuple(file_type)):
            tar_file.extract(f_name, path=dest)
            OK(f_name)
        elif is_archive(f_name):
            WARN(f_name)
            f_data = tar_file.extractfile(f_name)
            extract_data(f_name, f_data, dest, file_type, ignore_list)

#recursively extract files in zip file
def extract_zip(zip_file, dest, file_type, ignore_list):
    for f_name in zip_file.namelist():
        if match(f_name, ignore_list):
            continue
        elif f_name.endswith(tuple(file_type)):
            zip_file.extract(f_name, path=dest)
            OK(f_name)
        elif is_archive(f_name):
            WARN(f_name)
            #result of read() is unseekable, we need to wrap it with StringIO
            f_data = StringIO(zip_file.read(f_name)) 
            extract_data(f_name, f_data, dest, file_type, ignore_list)

#given file_path, dest_path, extract file_type files to dest_path
def extract_all(file_path, dest_path, file_type, ignore_list):
    if is_tar(file_path):
        tar_file = tarfile.open(file_path)
        extract_tar(tar_file, dest_path, file_type, ignore_list)
    elif is_zip(file_path):
        zip_file = zipfile.ZipFile(file_path)
        extract_zip(zip_file, dest_path, file_type, ignore_list)
    else:
        WARN("Unable to identify the type of file: %s" % ( file_path ))
    return True
    

#recursively move all files in dir_path's child directories to dir_path
def shuffle_all(dir_path, target_path):
    for p in os.listdir(dir_path):
        p_path = os.path.join(dir_path, p)
        if os.path.isdir(p_path):
            shuffle_all(p_path, target_path)
            shutil.rmtree(p_path)
        elif os.path.isfile(p_path):
            if dir_path == target_path:
                continue
            else:
                if not os.path.isfile(os.path.join(target_path, p)):
                    shutil.move(p_path, target_path)

#Validate the directories given by command line arguments
class ValidDir(argparse.Action):
    def __call__(self, parser, namespace, values, option_strings=None):
        failed = False
        if type(values) == list:
            for p in values:
                if not os.path.isdir(p):
                    raise Exception("Invalid argument: %s" %(p))
        else:
            if not os.path.isdir(values):
                raise Exception("Invalid argument: %s" %(values))
        setattr(namespace, self.dest, values)
        

#====================================== Main ====================================
if __name__ == "__main__":

    if len(sys.argv) < 4:
        welcome()

    #create argument parser
    parser = argparse.ArgumentParser(description="Parsing arguments for BAPT")
    #add arguments
    parser.add_argument("-l", required=True, 
            nargs=1, dest="lang", 
            help="the language of the submission files")
    parser.add_argument("-b", required=False, 
            nargs='?', dest="base_files", action=ValidDir,
            help="the directory of base files")
    parser.add_argument("-d", required=True, 
            nargs='+', dest="directories", action=ValidDir,
            help="directories of submission files")
    try:
        args = parser.parse_args()
    except Exception as e:
        WARN(" ".join(e.args))
        ERRO("Invalid command: %s" %(" ".join(sys.argv)))
    #OK("moss %s %s %s" %())


    #checking moss
    if os.path.isfile("./moss"):
        OK("moss found in current directory.")
    else:
        ERRO("cannot find moss in current directory.")

    INFO("====================================  Pre-processing files ============================")
    for directory in args.directories:
        #Two passes: one for extracting archives, the other for shuffling files in directories

        #Extraction procedure
        for f in os.listdir(directory):
            if is_archive(f):
                archive_file = f
                dest = os.path.join(directory, archive_file[:archive_file.find(".")])
                file_path = os.path.join(directory, archive_file)
                if not os.path.isdir(dest):
                    INFO("extracting files in %s" %(file_path))
                    extract_all(file_path, dest, args.lang, ["__MACOSX"])

        #Shuffling procedure
        #Have to go through another loop because result of os.listdir(dirctory) 
        #might have been changed by extraction procedure
        for f in os.listdir(directory):
            file_path = os.path.join(directory, f)
            if os.path.isdir(file_path):
                INFO("shuffling files in %s" %(file_path))
                shuffle_all(file_path, file_path)
                
            
    OK("====================================  Pre-processing done ============================")
            
    INFO("=================================   Running MOSS  ===================================")
    lang = " ".join(args.lang)
    base_files_dir = "" if args.base_files == None else args.base_files
    directories = " ".join(["%s/*/*.%s" %(d, lang) for d in args.directories])
    moss = ""
    if base_files_dir == "":
        moss = "./moss -l %s -d %s" %(lang, directories) 
    else:
        moss = "./moss -l " + lang + " "
        for f in os.listdir(base_files_dir):
            p = os.path.join(base_files_dir, f)
            moss += "-b " + p + " "
        moss += "-d " + directories
    moss += " -f %s/*.%s" %(d, lang)
    INFO("Calling MOSS: ")
    INFO("\t" + moss)
    subprocess.call(moss, shell=True)

    OK("===================================   BAPT Done  ======================================")

         

    sys.exit(0)






